name: DevSecOps Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  ###########################################
  # JOB 1: Security Scanning
  ###########################################
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install Security Tools
        run: |
          echo "📦 Installing Bandit and Checkov..."
          pip install bandit checkov
      
      - name: Run Bandit (Python SAST)
        run: |
          echo "🔍 Running Bandit security scan on Lambda code..."
          bandit -r lambda/ -f json -o bandit-report.json || true
          echo ""
          echo "📊 Bandit Results:"
          bandit -r lambda/ -f screen
        continue-on-error: false
      
      - name: Run Checkov (IaC Security)
        run: |
          echo "🔍 Running Checkov security scan on Terraform..."
          checkov -d terraform/ --output json --output-file-path . || true
          echo ""
          echo "📊 Checkov Results:"
          checkov -d terraform/ --compact --quiet
        continue-on-error: true
      
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            results_json.json
      
      - name: Evaluate Scan Results
        run: |
          echo "📊 Evaluating security scan results..."
          
          # Check if Bandit found high/critical issues
          if [ -f bandit-report.json ]; then
            HIGH_ISSUES=$(python3 -c "
import json
try:
    with open('bandit-report.json') as f:
        data = json.load(f)
        high = [r for r in data.get('results', []) if r.get('issue_severity') in ['HIGH', 'CRITICAL']]
        print(len(high))
except:
    print('0')
            ")
            
            echo "Found $HIGH_ISSUES high/critical severity issues"
            
            if [ "$HIGH_ISSUES" -gt "0" ]; then
              echo "❌ SECURITY FAILURE: High/critical vulnerabilities detected!"
              echo "Review bandit-report.json for details"
              exit 1
            fi
          fi
          
          echo "✅ Security scans passed!"

  ###########################################
  # JOB 2: Terraform Plan (on Pull Requests)
  ###########################################
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -no-color

  ###########################################
  # JOB 3: Deploy (only on main branch push)
  ###########################################
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
      
      - name: Get API URL
        working-directory: ./terraform
        run: |
          API_URL=$(terraform output -raw api_url)
          echo "🚀 API deployed successfully!"
          echo "API URL: $API_URL"
          echo "API_URL=$API_URL" >> $GITHUB_ENV
      
      - name: Test Deployed API
        run: |
          echo "🧪 Testing deployed API..."
          sleep 5  # Wait for API to be ready
          curl -s ${{ env.API_URL }} || echo "API test failed (might need retry)"
      
      - name: Deployment Summary
        run: |
          echo "✅ Deployment Complete!"
          echo "API URL: ${{ env.API_URL }}"
          echo "Test with: curl ${{ env.API_URL }}"# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "master" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform'

on:
  push:
    branches: [ "master" ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false

      # On push to "master", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/"master"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
